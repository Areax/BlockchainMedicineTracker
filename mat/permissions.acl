/*
This is the permissions access control list 
All the permissions are listed here

The format for permissions is:

rule SampleConditionalRuleWithTransaction 
{
    description: "Description of the ACL rule"
    participant(m): "org.example.SampleParticipant"
    operation: READ, CREATE, UPDATE
    resource(v): "org.example.SampleAsset"
    transaction(tx): "org.example.SampleTransaction"
    condition: (v.owner.getIdentifier() == m.getIdentifier())
    action: ALLOW
}
*/

//gives network control and business control to the 
//admin of the hyperledger fabric network 
rule NetworkAdminUser
{
  description:  "Network admin is given business and network permissions"
  participant: "org.hyperledger.composer.system.NetworkAdmin"
  operation: ALL
  resource: "**"
  action: ALLOW  
}

//LogInChecker Rules
rule LogInCheckerREADUser
{
  description: "lets the login checker verify the user"
  participant: "org.mat.LogInChecker"
  operation: READ
  resource: "org.mat.User"
  action: ALLOW
}

//Employee Rules  
rule EmployeeCRUDItemType
{
  description: "Allow an admin employee to be able to CRUD item types"
  participant(e): "org.mat.Employee"
  operation: CREATE, READ, UPDATE, DELETE
  resource: "org.mat.ItemType"
  condition: (e.employeeType == "Admin")
  action: ALLOW
}

rule EmployeeREADItem
{
  description: "Allow ANY employee to READ an item that belongs to their business"
  participant(e): "org.mat.Employee"
  operation: READ
  resource(i): "org.mat.Item"
  condition: (e.worksFor == i.currentOwner)
  action: ALLOW
}

rule EmployeeUPDATEItemViaUpdateItemOwner
{
  description: "Allow ANY employee to UPDATE an item that belongs to their business via the UpdateItemOwner transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(i): "org.mat.Item"
  transaction: "org.mat.UpdateItemOwner"
  condition: (e.worksFor == i.currentOwner)
  action: ALLOW
}

rule EmployeeCDItem 
{
  description: "Allow an ADMIN employee to CREATE and DELETE an item that belongs to their business"
  participant(e): "org.mat.Employee"
  operation: CREATE, DELETE
  resource(i): "org.mat.Item"
  condition: ((e.worksFor == i.currentOwner) && (e.employeeType == "Admin"))
  action: ALLOW
}

rule EmployeeCRContract
{
  description: "Allow ANY employee to CREATE and READ a contract that belongs to their business"
  participant(e): "org.mat.Employee"
  operation: CREATE, READ
  resource(c): "org.mat.Contract"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaUpdateShipment
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateShipment transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.UpdateShipment"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaUpdateItemRequest
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateItemRequest transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.UpdateItemRequest"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaApproveContractChanges
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the ApproveContractChanges transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.ApproveContractChanges"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaUpdateContractArrivalDateTime
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateContractArrivalDateTime transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.UpdateContractArrivalDateTime"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaAddShipmentToShipmentList
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the AddShipmentToShipmentList transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.AddShipmentToShipmentList"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaRemoveShipmentFromShipmentList
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the RemoveShipmentFromShipmentList transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.RemoveShipmentFromShipmentList"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaAddItemRequestToRequestedItems
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the AddItemRequestToRequestedItems transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.AddItemRequestToRequestedItemsList"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

rule EmployeeUPDATEContractViaRemoveItemRequestFromRequestedItems
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the RemoveItemRequestFromRequestedItems transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.RemoveItemRequestFromRequestedItemsList"
  condition: ((e.worksFor == c.sellingBusiness) || (e.worksFor == c.buyingBusiness))
  action: ALLOW
}

